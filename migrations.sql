create schema if not exists consult;

set search_path to consult;
create extension if not exists pgcrypto;

set search_path to consult;
create table if not exists tb_company(
	"id_company" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp(0) not null default timezone('utc'::text, now()),
	"cnpj" varchar(14) unique not null,
	"fantasy_name" text not null,
	"id_headquarter" integer null references tb_company
);
comment on table tb_company is 'Lorem ipsum';

set search_path to consult;
create table if not exists tb_access(
	"id_access" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp(0) not null default timezone('utc'::text, now()),
	"id_company" integer null references tb_company,
	"username" text unique not null,
	"role" text not null check ("role" in ('SHIPPING_COMPANY', 'ADMIN'))
);
comment on table tb_access is 'Lorem ipsum';

set search_path to consult;
create table if not exists tb_security(
	"id_security" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp(0) not null default timezone('utc'::text, now()),
	"id_access" integer unique not null references tb_access,
	"password" text not null,
	"reset_token" text null,
	"reset_issued_at" timestamp(0) null,
	"updated_at" timestamp(0) null
);
comment on table tb_security is 'Table for authentication data';

set search_path to consult;
create table if not exists tb_toll_plaza_period(
	"id_toll_plaza_period" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp(0) not null default timezone('utc'::text, now()),
	"start_at" timestamp not null,
	"end_at" timestamp not null,
	"status" text not null check ("status" in ('PENDING', 'UNDER_IMPLEMENTATION', 'DONE', 'ERROR')),
	"inactived" boolean not null default false
);
comment on table tb_toll_plaza_period is 'Lorem ipsum';

set search_path to consult;
create table if not exists tb_toll_plaza(
	"id_toll_plaza" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp(0) not null default timezone('utc'::text, now()),
	"associate_company" text not null,
	"highway" text not null,
	"km" text not null,
	"category" smallint not null,
	"value" decimal(12, 2) not null,
	"full_road_name" text not null,
	"metadata" json not null default '{}'::json,
	"id_toll_plaza_period" integer not null references tb_toll_plaza_period on delete cascade
);
comment on table tb_toll_plaza is 'Lorem ipsum';

set search_path to consult;
create table if not exists tb_vehicle(
	"id_vehicle" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp(0) not null default timezone('utc'::text, now()),
	"license_plate" varchar(7) not null,
	"brand" text null,
	"model" text null,
	"year" smallint null,
	"description" text null,
	"id_company" integer not null references tb_company
);
comment on table tb_vehicle is 'Lorem ipsum';

set search_path to consult;
create table if not exists tb_vehicle_axl(
	"id_vehicle_axl" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp(0) not null default timezone('utc'::text, now()),
	"total" smallint not null,
	"suspended" smallint not null,
	"start_at" timestamp not null,
	"end_at" timestamp null,
	"id_vehicle" integer not null references tb_vehicle on delete cascade 
);
comment on table tb_vehicle_axl is 'Lorem ipsum';

set search_path to consult;
create table if not exists tb_vehicle_client(
	"id_vehicle_client" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp(0) not null default timezone('utc'::text, now()),
	"segment" text null,
	"client" text null,
	"group" text null,
	"subgroup" text null,
	"start_at" timestamp not null,
	"end_at" timestamp null,
	"id_vehicle" integer not null references tb_vehicle on delete cascade
);
comment on table tb_vehicle_client is 'Lorem ipsum';

set search_path to consult;
create table if not exists tb_trailer(
	"id_trailer" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp(0) not null default timezone('utc'::text, now()),
	"first_license_plate" varchar(7) not null,
	"second_license_plate" varchar(7) null,
	"third_license_plate" varchar(7) null,
	"kind_of_equipment" text null,
	"model" text null,
	"axles_total" smallint not null,
	"axles_suspended" smallint not null,
	"id_company" integer not null references tb_company
);
comment on table tb_trailer is 'Lorem ipsum';

set search_path to consult;
create table if not exists tb_invoice(
	"id_invoice" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp(0) not null default timezone('utc'::text, now()),
	"identifier" text not null,
	"metadata" json not null default '{}'::json,
	"operator_company" text not null,
	"source" text not null,
	"id_company" integer not null references tb_company
);
comment on table tb_invoice is 'Lorem ipsum';

set search_path to consult;
create table if not exists tb_invoice_progress(
	"id_invoice_progress" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp(0) not null default timezone('utc'::text, now()),
	"tickets" integer not null default 0,
	"tickets_done" integer not null default 0,
	"trips" integer not null default 0,
	"trips_done" integer not null default 0,
	"id_invoice" integer not null references tb_invoice on delete cascade 
);
comment on table tb_invoice_progress is 'Lorem ipsum'; 

set search_path to consult;
create table if not exists tb_ticket(
	"id_ticket" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp(0) not null default timezone('utc'::text, now()),
	"type" text not null check ("type" in ('Ticket', 'TollValleyTicket')),
	"license_plate" varchar(7) not null,
	"category" smallint not null,
	"highway" text null,
	"fare" decimal(12, 2) not null,
	"paid_at" timestamp not null,
	"trip" text null,
	"metadata" json not null default '{}'::json,
	"id_invoice" integer not null references tb_invoice on delete cascade
);
comment on table tb_ticket is 'Lorem ipsum';
create index idx_tb_ticket_license_plate_paid_at on tb_ticket(license_plate, paid_at desc);
comment on index idx_tb_ticket_license_plate_paid_at is 'Index for duplicate analysis';

set search_path to consult;
create table if not exists tb_toll_valley_credit(
	"id_toll_valley_credit" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp(0) not null default timezone('utc'::text, now()),
	"license_plate" varchar(7) not null,
	"trip" text null,
	"description" text null,
	"value" decimal(12, 2) not null,
	"received_at" timestamp not null,
	"metadata" json not null default '{}'::json,
	"id_invoice" integer not null references tb_invoice on delete cascade
);
comment on table tb_toll_valley_credit is 'Lorem ipsum';

set search_path to consult;
create table if not exists tb_ticket_analysis(
	"id_ticket_analysis" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp(0) not null default timezone('utc'::text, now()),
	"updated_at" timestamp(0) null,
	"value" decimal(12, 2) null,
	"result_type" text null,
	"id_ticket" integer unique not null references tb_ticket on delete cascade,
	"id_vehicle_axl" integer null references tb_vehicle_axl,
	"id_toll_plaza" integer null references tb_toll_plaza
);
comment on table tb_ticket_analysis is 'Lorem ipsum';

set search_path to consult;
create table if not exists tb_trip_analysis(
	"id_trip_analysis" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp(0) not null default timezone('utc'::text, now()),
	"updated_at" timestamp(0) null,
	"trip" text not null,
	"license_plate" varchar(7) not null,
	"transactions" integer not null,
	"difference" decimal(12, 2) not null,
	"debit" decimal(12, 2) not null,
	"credit" decimal(12, 2) not null,
	"result_type" text null,
	"start_at" timestamp not null,
	"end_at" timestamp not null,
	"id_company" integer not null references tb_company
);
comment on table tb_trip_analysis is 'Lorem ipsum';
create index idx_tb_trip_analysis_company_trip on tb_trip_analysis(id_company, trip);
comment on index idx_tb_trip_analysis_company_trip is 'Index for trip analysis';

set search_path to consult;
create table if not exists tb_monthly_payment(
	"id_monthly_payment" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp(0) not null default timezone('utc'::text, now()),
	"license_plate" varchar(7) not null,
	"tag" text not null,
	"category" integer not null,
	"month" smallint not null,
	"year" smallint not null,
	"value" decimal(12, 2) not null,
	"id_invoice" integer not null references tb_invoice on delete cascade
);
comment on table tb_monthly_payment is 'Lorem ipsum';

------------------------------------------------------------

create schema if not exists consult;

set search_path to consult;
create extension if not exists pgcrypto;

set search_path to consult;
create table if not exists tb_company(
	"id_company" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp not null default timezone('utc'::text, now()),
	"cnpj" varchar(14) unique not null,
	"fantasy_name" text not null,
	"id_headquarter" integer null references tb_company
);

set search_path to consult;
create table if not exists tb_user(
	"id_user" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp not null default timezone('utc'::text, now()),
	"id_company" integer null references tb_company,
	"username" text unique not null,
	"role" text not null check ("role" in ('ADMIN', 'USER'))
);

set search_path to consult;
create table if not exists tb_security(
	"id_security" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp not null default timezone('utc'::text, now()),
	"id_user" integer unique not null references tb_user,
	"password" text not null,
	"reset_token" text null,
	"reset_issued_at" timestamp null,
	"updated_at" timestamp null
);

set search_path to consult;
create table if not exists tb_toll_plaza_period(
	"id_toll_plaza_period" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp not null default timezone('utc'::text, now()),
	"description" text null,
	"status" text not null,
	"inactived" boolean not null default false,
	"start_at" timestamp not null,
	"end_at" timestamp not null
); 

set search_path to consult;
create table if not exists tb_toll_plaza(
	"id_toll_plaza" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp not null default timezone('utc'::text, now()),
	"associate_company" text not null,
	"highway" text not null,
	"km" text not null,
	"category" smallint not null,
	"value" decimal(12, 2) not null,
	"full_road_name" text not null,
	"metadata" json not null default '{}'::json,
	"id_toll_plaza_period" integer not null references tb_toll_plaza_period on delete cascade
);

set search_path to consult;
create table if not exists tb_vehicle(
	"id_vehicle" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp not null default timezone('utc'::text, now()),
	"license_plate" varchar(7) not null,
	"brand" text null,
	"model" text null,
	"year" smallint null,
	"description" text null,
	"id_company" integer not null references tb_company
);

set search_path to consult;
create table if not exists tb_vehicle_axl(
	"id_vehicle_axl" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp not null default timezone('utc'::text, now()),
	"total" smallint not null,
	"suspended" smallint not null,
	"start_at" timestamp not null,
	"end_at" timestamp null,
	"id_vehicle" integer not null references tb_vehicle on delete cascade 
);

set search_path to consult;
create table if not exists tb_vehicle_client(
	"id_vehicle_client" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp not null default timezone('utc'::text, now()),
	"segment" text null,
	"client" text null,
	"group" text null,
	"subgroup" text null,
	"start_at" timestamp not null,
	"end_at" timestamp null,
	"id_vehicle" integer not null references tb_vehicle on delete cascade
);

set search_path to consult;
create table if not exists tb_trailer(
	"id_trailer" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp not null default timezone('utc'::text, now()),
	"first_license_plate" varchar(7) not null,
	"second_license_plate" varchar(7) null,
	"third_license_plate" varchar(7) null,
	"kind_of_equipment" text null,
	"model" text null,
	"axles_total" smallint not null,
	"axles_suspended" smallint not null,
	"id_company" integer not null references tb_company
);

set search_path to consult;
create table if not exists tb_invoice(
	"id_invoice" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp not null default timezone('utc'::text, now()),
	"identifier" text not null,
	"metadata" json not null default '{}'::json,
	"operator_company" text not null,
	"source" text not null,
	"id_company" integer not null references tb_company
);

set search_path to consult;
create table if not exists tb_invoice_progress(
	"id_invoice_progress" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp not null default timezone('utc'::text, now()),
	"tickets" integer not null default 0,
	"tickets_done" integer not null default 0,
	"trips" integer not null default 0,
	"trips_done" integer not null default 0,
	"id_invoice" integer not null references tb_invoice on delete cascade 
); 

set search_path to consult;
create table if not exists tb_ticket(
	"id_ticket" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp not null default timezone('utc'::text, now()),
	"type" text not null check ("type" in ('TICKET', 'TOLL_VALLEY_TICKET')),
	"license_plate" varchar(7) not null,
	"category" smallint not null,
	"highway" text null,
	"fare" decimal(12, 2) not null,
	"paid_at" timestamp not null,
	"trip" text null,
	"metadata" json not null default '{}'::json,
	"id_invoice" integer not null references tb_invoice on delete cascade
);
create index idx_tb_ticket_license_plate_paid_at on tb_ticket(license_plate, paid_at desc);
comment on index idx_tb_ticket_license_plate_paid_at is 'Index for duplicate analysis';

set search_path to consult;
create table if not exists tb_toll_valley_credit(
	"id_toll_valley_credit" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp not null default timezone('utc'::text, now()),
	"license_plate" varchar(7) not null,
	"trip" text null,
	"description" text null,
	"value" decimal(12, 2) not null,
	"received_at" timestamp not null,
	"metadata" json not null default '{}'::json,
	"id_invoice" integer not null references tb_invoice on delete cascade
);

set search_path to consult;
create table if not exists tb_ticket_analysis(
	"id_ticket_analysis" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp not null default timezone('utc'::text, now()),
	"updated_at" timestamp null,
	"value" decimal(12, 2) null,
	"result_type" text null,
	"id_ticket" integer unique not null references tb_ticket on delete cascade,
	"id_vehicle_axl" integer null references tb_vehicle_axl,
	"id_toll_plaza" integer null references tb_toll_plaza
);

set search_path to consult;
create table if not exists tb_trip_analysis(
	"id_trip_analysis" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp not null default timezone('utc'::text, now()),
	"updated_at" timestamp null,
	"trip" text not null,
	"license_plate" varchar(7) not null,
	"transactions" integer not null,
	"difference" decimal(12, 2) not null,
	"debit" decimal(12, 2) not null,
	"credit" decimal(12, 2) not null,
	"result_type" text null,
	"start_at" timestamp not null,
	"end_at" timestamp not null,
	"id_company" integer not null references tb_company
);
create index idx_tb_trip_analysis_company_trip on tb_trip_analysis(id_company, trip);
comment on index idx_tb_trip_analysis_company_trip is 'Index for trip analysis';

set search_path to consult;
create table if not exists tb_monthly_payment(
	"id_monthly_payment" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp not null default timezone('utc'::text, now()),
	"license_plate" varchar(7) not null,
	"tag" text not null,
	"category" integer not null,
	"month" smallint not null,
	"year" smallint not null,
	"value" decimal(12, 2) not null,
	"id_invoice" integer not null references tb_invoice on delete cascade
);

--------------------------------------------------------------------

set search_path to consult;
drop table if exists tb_company cascade;
drop table if exists tb_access cascade;
drop table if exists tb_security cascade;
drop table if exists tb_vehicle cascade;
drop table if exists tb_monthly_payment;

delete from tb_toll_plaza;
delete from tb_toll_plaza_period;

select count(*) from tb_toll_plaza ttp ;
select count(*) from tb_ticket tt;
select count(*) from tb_ticket_analysis tta;
select count(*) from tb_toll_valley_credit ttvc;

-- Clone period
insert into tb_toll_plaza("associate_company", "highway", "km", "category", "value", "full_road_name", "source", "metadata", "id_toll_plaza_period")
select "associate_company", "highway", "km", "category", "value", "full_road_name", "source", "metadata", 7 as "id_toll_plaza_period"
from tb_toll_plaza
where id_toll_plaza_period = 6;

drop table if exists tb_ticket;
drop table if exists tb_invoice cascade;
drop table if exists tb_invoice_progress cascade;

begin;
update tb_invoice_progress set tickets_done = tickets_done + 1 where id_invoice_progress = 11;
commit;

delete from tb_invoice;
delete from tb_trip_analysis;

-- get invoice
select ti.operator_company "operatorCompany", ti."source", ti.id_company "idCompany"
from tb_invoice ti 
where ti.id_invoice = 1;

-- get invoice tickets
select tt.id_ticket "idTicket", tt.license_plate "licensePlate", tt.category, tt.highway, tt.fare, tt.paid_at "paidAt", ti.operator_company "operatorCompany", ti."source", ti.id_company 
from tb_ticket tt
inner join tb_invoice ti on ti.id_invoice = tt.id_invoice
where ti.id = 'aa352a74-27d2-4590-affd-397930b59de7';

-- get ticket
select tt.id_ticket "idTicket", tt.license_plate "licensePlate", tt.category, tt.highway, tt.fare, tt.paid_at "paidAt", ti.operator_company "operatorCompany", ti."source", ti.id_company 
from tb_ticket tt
inner join tb_invoice ti on ti.id_invoice = tt.id_invoice
where tt.id = '4b3d8f15-5de0-44ee-a489-89cb25743de6';

-- get toll plaza list for algorithm
select distinct on (full_road_name) full_road_name, km, value, highway, id_toll_plaza
from (
	select ttp.full_road_name, ttp.km, ttp.value, ttp.highway, ttp.id_toll_plaza  
	from tb_toll_plaza ttp
	where ttp.category = 63
	order by ttp.value desc
) as subquery;

-- get vehicle
select tva.id_vehicle_axl "idVehicleAxl", tva.total, tva.suspended, tva.start_at "startAt", tva.end_at "endAt"
from tb_vehicle_axl tva
inner join tb_vehicle tv on tv.id_vehicle = tva.id_vehicle
where tv.id_company = 2 and tv.license_plate = 'EOE7171';

-- save analysis to elasticsearch
select tta.id, tta.result_type "resultType", tta.value, tc.cnpj "company",
	tt.license_plate "licensePlate", tt.category, tt.highway, tt.fare,
	tt.paid_at "paidAt", tt.id_invoice "idInvoice", ti.operator_company "operatorCompany",
	tt."type" "ticketType", tva.total "axlTotal", tva.suspended "axlSuspended",
	ttp.full_road_name "tollPlazaFullRoadName", ttp.value "tollPlazaValue"
from tb_ticket_analysis tta
inner join tb_ticket tt on tt.id_ticket = tta.id_ticket
inner join tb_invoice ti on ti.id_invoice = tt.id_invoice
inner join tb_company tc on tc.id_company = ti.id_company
left join tb_vehicle_axl tva on tva.id_vehicle_axl = tta.id_vehicle_axl
left join tb_toll_plaza ttp on ttp.id_toll_plaza = tta.id_toll_plaza
where tta.id_ticket_analysis in (3, 254);

-- get tickets for creditAndDebitAnalysis
select tt.id_ticket as idTicket, tt.license_plate as licensePlate, tt.fare, tt.paid_at as "date"
from tb_ticket tt
inner join tb_invoice ti on ti.id_invoice = tt.id_invoice
where ti.id_invoice = 3 and tt.trip = '33043470';

-- get credits for creditAndDebitAnalysis
select ttvc.id_toll_valley_credit as idCredit, ttvc.license_plate as licensePlate, ttvc.value, ttvc.received_at as receivedAt
from tb_toll_valley_credit ttvc
inner join tb_invoice ti on ti.id_invoice = ttvc.id_invoice
where ti.id_company = 3 and ttvc.trip = '33043470';

select distinct tt.highway  
from tb_ticket tt 
where tt.category = 63;

select count(*) from tb_ticket_analysis tta ;
select count(*) from tb_ticket;

set search_path to consult;
delete from tb_toll_plaza ;

select tt.id_ticket, tt.highway, tt.category, tt.fare, tt.paid_at as paidAt
from tb_ticket as tt
where license_plate = 'EOE7171'
order by paid_at desc;

-- query to get trips from a invoice
select count(distinct tt.trip)
from tb_ticket tt
inner join tb_invoice ti on ti.id_invoice = tt.id_invoice 
where ti.id = 'e87f53c6-b3c5-4a78-9f63-fe7a539d2105' and tt.trip is not null
union all select count(distinct ttvc.trip)
from tb_toll_valley_credit ttvc
inner join tb_invoice ti on ti.id_invoice = ttvc.id_invoice  
where ti.id = 'e87f53c6-b3c5-4a78-9f63-fe7a539d2105' and ttvc.trip is not null;

-- update progress
begin;
set transaction isolation level read committed;
update consult.tb_invoice_progress set trips_done = trips_done + 1 where id_invoice = 37;
commit;

select * from tb_invoice_progress tip ;

select count(*) from tb_trip_analysis;

---------------------------------------------------------

create schema if not exists consult;

set search_path to consult;
create extension if not exists pgcrypto;

set search_path to consult;
create table if not exists tb_company(
	"id_company" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp(0) not null default timezone('utc'::text, now()),
	"cnpj" varchar(14) unique not null,
	"fantasy_name" text not null,
	"id_headquarter" integer null references tb_company
);
comment on table tb_company is 'Lorem ipsum';

set search_path to consult;
create table if not exists tb_access(
	"id_access" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp(0) not null default timezone('utc'::text, now()),
	"id_company" integer null references tb_company,
	"username" text unique not null,
	"role" text not null check ("role" in ('SHIPPING_COMPANY', 'ADMIN'))
);
comment on table tb_access is 'Lorem ipsum';

set search_path to consult;
create table if not exists tb_security(
	"id_security" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp(0) not null default timezone('utc'::text, now()),
	"id_access" integer unique not null references tb_access,
	"password" text not null,
	"reset_token" text null,
	"reset_issued_at" timestamp(0) null,
	"updated_at" timestamp(0) null
);
comment on table tb_security is 'Table for authentication data';

set search_path to consult;
create table if not exists tb_toll_plaza_period(
	"id_toll_plaza_period" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp(0) not null default timezone('utc'::text, now()),
	"start_at" timestamp not null,
	"end_at" timestamp not null,
	"status" text not null check ("status" in ('PENDING', 'UNDER_IMPLEMENTATION', 'DONE', 'ERROR')),
	"inactived" boolean not null default false
);
comment on table tb_toll_plaza_period is 'Lorem ipsum';

set search_path to consult;
create table if not exists tb_toll_plaza(
	"id_toll_plaza" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp(0) not null default timezone('utc'::text, now()),
	"associate_company" text not null,
	"highway" text not null,
	"km" text not null,
	"category" smallint not null,
	"value" decimal(12, 2) not null,
	"full_road_name" text not null,
	"metadata" json not null default '{}'::json,
	"id_toll_plaza_period" integer not null references tb_toll_plaza_period on delete cascade
);
comment on table tb_toll_plaza is 'Lorem ipsum';

set search_path to consult;
create table if not exists tb_vehicle(
	"id_vehicle" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp(0) not null default timezone('utc'::text, now()),
	"license_plate" varchar(7) not null,
	"brand" text null,
	"model" text null,
	"year" smallint null,
	"description" text null,
	"id_company" integer not null references tb_company
);
comment on table tb_vehicle is 'Lorem ipsum';

set search_path to consult;
create table if not exists tb_vehicle_axl(
	"id_vehicle_axl" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp(0) not null default timezone('utc'::text, now()),
	"total" smallint not null,
	"suspended" smallint not null,
	"start_at" timestamp not null,
	"end_at" timestamp null,
	"id_vehicle" integer not null references tb_vehicle on delete cascade 
);
comment on table tb_vehicle_axl is 'Lorem ipsum';

set search_path to consult;
create table if not exists tb_vehicle_client(
	"id_vehicle_client" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp(0) not null default timezone('utc'::text, now()),
	"segment" text null,
	"client" text null,
	"group" text null,
	"subgroup" text null,
	"start_at" timestamp not null,
	"end_at" timestamp null,
	"id_vehicle" integer not null references tb_vehicle on delete cascade
);
comment on table tb_vehicle_client is 'Lorem ipsum';

set search_path to consult;
create table if not exists tb_trailer(
	"id_trailer" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp(0) not null default timezone('utc'::text, now()),
	"first_license_plate" varchar(7) not null,
	"second_license_plate" varchar(7) null,
	"third_license_plate" varchar(7) null,
	"kind_of_equipment" text null,
	"model" text null,
	"axles_total" smallint not null,
	"axles_suspended" smallint not null,
	"id_company" integer not null references tb_company
);
comment on table tb_trailer is 'Lorem ipsum';

set search_path to consult;
create table if not exists tb_invoice(
	"id_invoice" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp(0) not null default timezone('utc'::text, now()),
	"identifier" text not null,
	"metadata" json not null default '{}'::json,
	"operator_company" text not null,
	"source" text not null,
	"id_company" integer not null references tb_company
);
comment on table tb_invoice is 'Lorem ipsum';

set search_path to consult;
create table if not exists tb_invoice_progress(
	"id_invoice_progress" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp(0) not null default timezone('utc'::text, now()),
	"tickets" integer not null default 0,
	"tickets_done" integer not null default 0,
	"trips" integer not null default 0,
	"trips_done" integer not null default 0,
	"id_invoice" integer not null references tb_invoice on delete cascade 
);
comment on table tb_invoice_progress is 'Lorem ipsum'; 

set search_path to consult;
create table if not exists tb_ticket(
	"id_ticket" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp(0) not null default timezone('utc'::text, now()),
	"type" text not null check ("type" in ('Ticket', 'TollValleyTicket')),
	"license_plate" varchar(7) not null,
	"category" smallint not null,
	"highway" text null,
	"fare" decimal(12, 2) not null,
	"paid_at" timestamp not null,
	"trip" text null,
	"metadata" json not null default '{}'::json,
	"id_invoice" integer not null references tb_invoice on delete cascade
);
comment on table tb_ticket is 'Lorem ipsum';
create index idx_tb_ticket_license_plate_paid_at on tb_ticket(license_plate, paid_at desc);
comment on index idx_tb_ticket_license_plate_paid_at is 'Index for duplicate analysis';

set search_path to consult;
create table if not exists tb_toll_valley_credit(
	"id_toll_valley_credit" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp(0) not null default timezone('utc'::text, now()),
	"license_plate" varchar(7) not null,
	"trip" text null,
	"description" text null,
	"value" decimal(12, 2) not null,
	"received_at" timestamp not null,
	"metadata" json not null default '{}'::json,
	"id_invoice" integer not null references tb_invoice on delete cascade
);
comment on table tb_toll_valley_credit is 'Lorem ipsum';

set search_path to consult;
create table if not exists tb_ticket_analysis(
	"id_ticket_analysis" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp(0) not null default timezone('utc'::text, now()),
	"updated_at" timestamp(0) null,
	"value" decimal(12, 2) null,
	"result_type" text null,
	"id_ticket" integer unique not null references tb_ticket on delete cascade,
	"id_vehicle_axl" integer null references tb_vehicle_axl,
	"id_toll_plaza" integer null references tb_toll_plaza
);
comment on table tb_ticket_analysis is 'Lorem ipsum';

set search_path to consult;
create table if not exists tb_trip_analysis(
	"id_trip_analysis" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp(0) not null default timezone('utc'::text, now()),
	"updated_at" timestamp(0) null,
	"trip" text not null,
	"license_plate" varchar(7) not null,
	"transactions" integer not null,
	"difference" decimal(12, 2) not null,
	"debit" decimal(12, 2) not null,
	"credit" decimal(12, 2) not null,
	"result_type" text null,
	"start_at" timestamp not null,
	"end_at" timestamp not null,
	"id_company" integer not null references tb_company
);
comment on table tb_trip_analysis is 'Lorem ipsum';
create index idx_tb_trip_analysis_company_trip on tb_trip_analysis(id_company, trip);
comment on index idx_tb_trip_analysis_company_trip is 'Index for trip analysis';

set search_path to consult;
create table if not exists tb_monthly_payment(
	"id_monthly_payment" integer generated by default as identity primary key,
	"id" uuid not null unique default gen_random_uuid(),
	"created_at" timestamp(0) not null default timezone('utc'::text, now()),
	"license_plate" varchar(7) not null,
	"tag" text not null,
	"category" integer not null,
	"month" smallint not null,
	"year" smallint not null,
	"value" decimal(12, 2) not null,
	"id_invoice" integer not null references tb_invoice on delete cascade
);
comment on table tb_monthly_payment is 'Lorem ipsum';

